#!/usr/bin/env python3
"""
Match predicted promoters from GFF3 to genes based on proximity to TSS.
Identifies which genes have promoters within 100nt upstream of their transcription start site.
"""

import argparse
from typing import Dict, List, Tuple, Set
from collections import defaultdict


def parse_promoters_from_gff(gff_file: str) -> List[Dict]:
    """Parse promoters from GFF3 file generated by screen command"""
    promoters = []

    with open(gff_file, 'r') as f:
        for line in f:
            if line.startswith('#'):
                continue

            parts = line.strip().split('\t')
            if len(parts) >= 9 and parts[2] == 'promoter':
                # Parse attributes
                attributes = {}
                for attr in parts[8].split(';'):
                    if '=' in attr:
                        key, value = attr.split('=', 1)
                        attributes[key] = value

                promoter = {
                    'chromosome': parts[0],
                    'source': parts[1],
                    'start': int(parts[3]),
                    'end': int(parts[4]),
                    'score': float(parts[5]),
                    'strand': parts[6],
                    'id': attributes.get('ID', ''),
                    'css': float(attributes.get('css', 0)),
                    'mss': float(attributes.get('mss', 0))
                }
                promoters.append(promoter)

    return promoters


def parse_genes_from_gff(gff_file: str) -> List[Dict]:
    """Parse gene annotations from GFF file"""
    genes = []

    with open(gff_file, 'r') as f:
        for line in f:
            if line.startswith('#'):
                continue

            parts = line.strip().split('\t')
            if len(parts) >= 9 and parts[2] == 'gene':
                # Parse attributes
                attributes = {}
                for attr in parts[8].split(';'):
                    if '=' in attr:
                        key, value = attr.split('=', 1)
                        attributes[key] = value

                gene = {
                    'chromosome': parts[0],
                    'start': int(parts[3]),
                    'end': int(parts[4]),
                    'strand': parts[6],
                    'id': attributes.get('ID', ''),
                    'name': attributes.get('Name', attributes.get('gene', '')),
                    'dbxref': attributes.get('Dbxref', ''),
                    'biotype': attributes.get('gene_biotype', ''),
                    'description': attributes.get('description', '')
                }
                genes.append(gene)

    return genes


def match_promoters_to_genes(promoters: List[Dict], genes: List[Dict], upstream_distance: int = 100) -> Dict:
    """
    Match promoters to genes based on proximity to TSS.

    Returns a dictionary with gene information and matching promoters.
    """
    # Create chromosome-based indices for efficient matching
    promoters_by_chr = defaultdict(list)
    for promoter in promoters:
        promoters_by_chr[promoter['chromosome']].append(promoter)

    matches = []
    genes_with_promoters = set()
    promoters_matched = set()

    # Track best promoter per gene
    best_promoter_per_gene = {}

    for gene in genes:
        chr_promoters = promoters_by_chr.get(gene['chromosome'], [])

        for promoter in chr_promoters:
            # Check if promoter is within upstream region of gene
            is_upstream = False
            distance = None

            if gene['strand'] == '+':
                # For + strand genes, promoter should be upstream (before) the start
                # Promoter should end near gene start
                if promoter['end'] <= gene['start'] and promoter['end'] >= gene['start'] - upstream_distance:
                    is_upstream = True
                    distance = gene['start'] - promoter['end']
            else:  # - strand
                # For - strand genes, promoter should be upstream (after) the end
                # Promoter should start near gene end
                if promoter['start'] >= gene['end'] and promoter['start'] <= gene['end'] + upstream_distance:
                    is_upstream = True
                    distance = promoter['start'] - gene['end']

            if is_upstream:
                match = {
                    'gene_id': gene['id'],
                    'gene_name': gene['name'],
                    'gene_chr': gene['chromosome'],
                    'gene_start': gene['start'],
                    'gene_end': gene['end'],
                    'gene_strand': gene['strand'],
                    'gene_biotype': gene['biotype'],
                    'promoter_id': promoter['id'],
                    'promoter_source': promoter['source'],
                    'promoter_start': promoter['start'],
                    'promoter_end': promoter['end'],
                    'promoter_score': promoter['score'],
                    'promoter_css': promoter['css'],
                    'promoter_mss': promoter['mss'],
                    'distance_to_tss': distance
                }

                # Keep only the best scoring promoter per gene
                gene_key = gene['id']
                if gene_key not in best_promoter_per_gene or match['promoter_score'] > best_promoter_per_gene[gene_key]['promoter_score']:
                    best_promoter_per_gene[gene_key] = match

    # Use only best promoters
    matches = list(best_promoter_per_gene.values())
    genes_with_promoters = set(best_promoter_per_gene.keys())
    promoters_matched = {match['promoter_id'] for match in matches}

    return {
        'matches': matches,
        'genes_with_promoters': genes_with_promoters,
        'promoters_matched': promoters_matched,
        'total_genes': len(genes),
        'total_promoters': len(promoters)
    }


def generate_report(results: Dict, output_file: str = None) -> None:
    """Generate a report of genes with promoters"""

    report = []
    report.append("=" * 80)
    report.append("PROMOTER-GENE MATCHING REPORT")
    report.append("=" * 80)
    report.append(f"\nTotal genes analyzed: {results['total_genes']:,}")
    report.append(f"Total promoters analyzed: {results['total_promoters']:,}")
    report.append(f"Genes with promoters (within 100nt upstream): {len(results['genes_with_promoters'])}")
    report.append(f"Promoters matched to genes: {len(results['promoters_matched'])}")
    report.append(f"Percentage of genes with promoters: {100 * len(results['genes_with_promoters']) / results['total_genes']:.2f}%")

    report.append("\n" + "-" * 80)
    report.append("MATCHED GENE-PROMOTER PAIRS (sorted by promoter score)")
    report.append("-" * 80)

    # Sort matches by promoter score (highest first)
    sorted_matches = sorted(results['matches'],
                          key=lambda x: x['promoter_score'], reverse=True)

    # Group by gene biotype
    matches_by_biotype = defaultdict(list)
    for match in sorted_matches:
        matches_by_biotype[match['gene_biotype']].append(match)

    # Show top scoring matches
    report.append(f"\nTOP 100 HIGHEST-SCORING PROMOTER MATCHES:")
    report.append("-" * 40)
    for i, match in enumerate(sorted_matches[:100], 1):
        # Extract polymerase type from promoter source
        pol_type = 'Pol II' if 'pol2' in match['promoter_source'] else 'Pol III'
        report.append(
            f"{i:2}. {match['gene_name']:<20} "
            f"({match['gene_biotype']:<15}) "
            f"[{pol_type:<7}] "
            f"Score: {match['promoter_score']:.3f} "
            f"CSS: {match['promoter_css']:.3f} "
            f"MSS: {match['promoter_mss']:.3f} "
            f"Dist: {match['distance_to_tss']}nt"
        )

    # Summary by biotype
    report.append("\n" + "-" * 80)
    report.append("SUMMARY BY GENE BIOTYPE")
    report.append("-" * 80)

    biotype_counts = defaultdict(int)
    biotype_scores = defaultdict(list)
    for match in sorted_matches:
        biotype_counts[match['gene_biotype']] += 1
        biotype_scores[match['gene_biotype']].append(match['promoter_score'])

    for biotype in sorted(biotype_counts.keys(), key=lambda x: biotype_counts[x], reverse=True):
        avg_score = sum(biotype_scores[biotype]) / len(biotype_scores[biotype])
        max_score = max(biotype_scores[biotype])
        report.append(
            f"  {biotype:<20}: {biotype_counts[biotype]:>5} genes "
            f"(avg score: {avg_score:.3f}, max: {max_score:.3f})"
        )

    # Summary by promoter source
    report.append("\n" + "-" * 80)
    report.append("SUMMARY BY PROMOTER SOURCE")
    report.append("-" * 80)

    source_counts = defaultdict(int)
    for match in sorted_matches:
        source_counts[match['promoter_source']] += 1

    for source in sorted(source_counts.keys()):
        report.append(f"  {source:<30}: {source_counts[source]:>5} genes")

    # Score distribution
    report.append("\n" + "-" * 80)
    report.append("PROMOTER SCORE DISTRIBUTION")
    report.append("-" * 80)

    score_bins = [(0.8, 0.85), (0.85, 0.9), (0.9, 0.95), (0.95, 1.0)]
    for low, high in score_bins:
        count = sum(1 for m in sorted_matches if low <= m['promoter_score'] < high)
        report.append(f"  {low:.2f} - {high:.2f}: {count:>5} genes")

    # Output report
    report_text = '\n'.join(report)

    if output_file:
        with open(output_file, 'w') as f:
            f.write(report_text)
        print(f"Report saved to {output_file}")
    else:
        print(report_text)

    return report_text


def main():
    parser = argparse.ArgumentParser(
        description='Match predicted promoters from GFF3 to genes based on proximity to TSS'
    )
    parser.add_argument('promoters_gff', help='Path to promoters GFF3 file from screen command')
    parser.add_argument('genes_gff', help='Path to genes GFF annotation file')
    parser.add_argument('-d', '--distance', type=int, default=100,
                       help='Maximum upstream distance to consider (default: 100nt)')
    parser.add_argument('-o', '--output', help='Output file for report (default: stdout)')
    parser.add_argument('--output-tsv', help='Output detailed matches as TSV file')
    parser.add_argument('--min-score', type=float, default=0.0,
                       help='Minimum promoter score to consider (default: 0.0)')

    args = parser.parse_args()

    # Parse input files
    print(f"Parsing promoters from {args.promoters_gff}...")
    promoters = parse_promoters_from_gff(args.promoters_gff)

    # Filter by minimum score if specified
    if args.min_score > 0:
        promoters = [p for p in promoters if p['score'] >= args.min_score]
        print(f"  Found {len(promoters)} promoters with score >= {args.min_score}")
    else:
        print(f"  Found {len(promoters)} promoters")

    print(f"Parsing genes from {args.genes_gff}...")
    genes = parse_genes_from_gff(args.genes_gff)
    print(f"  Found {len(genes)} genes")

    # Match promoters to genes
    print(f"Matching promoters to genes (within {args.distance}nt upstream)...")
    results = match_promoters_to_genes(promoters, genes, args.distance)

    # Generate report
    generate_report(results, args.output)

    # Save detailed matches if requested
    if args.output_tsv:
        with open(args.output_tsv, 'w') as f:
            # Write header
            f.write('\t'.join([
                'gene_id', 'gene_name', 'gene_chr', 'gene_start', 'gene_end',
                'gene_strand', 'gene_biotype', 'promoter_id', 'promoter_source',
                'promoter_start', 'promoter_end', 'promoter_score', 'promoter_css',
                'promoter_mss', 'distance_to_tss'
            ]) + '\n')

            # Write matches
            for match in sorted(results['matches'], key=lambda x: x['promoter_score'], reverse=True):
                f.write('\t'.join([
                    match['gene_id'], match['gene_name'], match['gene_chr'],
                    str(match['gene_start']), str(match['gene_end']),
                    match['gene_strand'], match['gene_biotype'],
                    match['promoter_id'], match['promoter_source'],
                    str(match['promoter_start']), str(match['promoter_end']),
                    f"{match['promoter_score']:.3f}", f"{match['promoter_css']:.3f}",
                    f"{match['promoter_mss']:.3f}", str(match['distance_to_tss'])
                ]) + '\n')

        print(f"Detailed matches saved to {args.output_tsv}")


if __name__ == '__main__':
    main()